{
  "dependencies": {
    "@angular/common": "12.2.17",
    "@angular/compiler": "12.2.17",
    "@angular/core": "12.2.17",
    "@angular/forms": "12.2.17",
    "@angular/platform-browser": "12.2.17",
    "@angular/platform-browser-dynamic": "12.2.17",
    "@devextreme/runtime": "3.0.11",
    "core-js": "2.4.1",
    "devexpress-diagram": "2.1.75",
    "devexpress-gantt": "4.1.47",
    "devextreme": "23.1.4",
    "devextreme-angular": "23.1.4",
    "devextreme-quill": "1.6.2",
    "es6-object-assign": "1.1.0",
    "inferno": "7.4.11",
    "inferno-clone-vnode": "latest",
    "inferno-compat": "latest",
    "inferno-create-class": "latest",
    "inferno-create-element": "7.4.11",
    "inferno-dom": "latest",
    "inferno-extras": "latest",
    "inferno-hydrate": "7.4.11",
    "jszip": "3.7.1",
    "luxon": "1.28.1",
    "prettier": "2.8.4",
    "rrule": "2.6.4",
    "rxjs": "7.5.3",
    "tslib": "2.3.1",
    "zone.js": "0.10.3"
  },
  "description": "This example demonstrates how to show and hide the Popup component, populate it with content, specify its position and other settings.\nTo see step-by-step instructions on how to get started with the DevExtreme Popup component, refer to the following tutorial: Getting Started with Popup.\nShow and Hide the Popup\nBind the visible property to a Boolean variable (popupVisible in this demo). Next, implement the showInfo(employee) method to set this Boolean variable to true. This causes the Popup to appear. To close a Popup, choose one of the following options:\n\n\nBuilt-in close button\nEnable the showCloseButton property to display the Close button in a Popup's top toolbar.\n\n\nCustom close button\nThis demo shows how to add custom buttons to a Popup. One of these buttons uses an onClick handler to set the popupVisible variable to false, causing the Popup to disappear. Refer to the next section (Configure the Popup) to learn how you can populate a popup with custom controls.\n\n\nOn outside click\nEnable the hideOnOutsideClick property to allow users to hide the Popup by clicking outside the component.\n\n\nConfigure the Popup\nThe Popup inner area is divided into three parts:\n\n\nTop toolbar\n\n\nPredefined\nSet showTitle to true and use the title property to specify the caption. The Close button will appear if you do not disable the showCloseButton property.\n\n\nCustom\nAdd toolbarItems markup and set each item's toolbar property to top. If you want to display an item in the overflow menu, as shown in this demo, set the item's locateInMenu property to always. You can also assign never to this property to keep the item outside the overflow menu, or you can assign auto to hide the item in the menu if the Popup's width decreases.\n\n\n\n\nContent\nTo populate the Popup with content, add markup inside the component.\n\n\nBottom toolbar\nTo enable the bottom toolbar, declare toolbarItems in the markup as shown in this demo. Set each item's toolbar property to bottom. To learn more about toolbar configuration, refer to the following tutorial: Getting Started with Toolbar\n\n\nResize and Position\nTo specify Popup size, use the height and width properties.\nIn this demo, each Popup's location is relative to the image. The code specifies the my, at, and of properties of the position object. The configuration in the demo reads as follows: \"place my center side at the bottom side of the #image${employee.ID} element.\"\nUse the container property to select the container in which you want to render the Popup. If you set the container property to an element on the page, the shading applies to this element.\nTurn on the dragEnabled option to allow users to move a Popup around the page.\n",
  "main": "src/app/app.component.ts",
  "name": "Overview - DevExtreme Popup"
}